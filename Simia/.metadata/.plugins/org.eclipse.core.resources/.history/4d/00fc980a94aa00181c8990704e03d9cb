{
    Reader source;
    final StatefulSession session2;
    List<String> myList;
    PackageBuilder builder = new PackageBuilder();
    builder.addRuleFlow(source);

    Package pkg = builder.getPackage();
    RuleBase ruleBase = RuleBaseFactory.newRuleBase();
    ruleBase.addPackage( pkg );
    final StatefulSession session = ruleBase.newStatefulSession();
    session.setGlobal(string, myList);

    ProcessInstance processInstance = ( ProcessInstance )
    session.startProcess(string);
    assertEquals(number, ((InternalProcessRuntime) ((InternalWorkingMemory) session).getProcessRuntime()).getTimerManager().getTimers().size());
    session.halt();

    myList = (List<String>) session2.getGlobal( string );

    processInstance = ( ProcessInstance ) session2.getProcessInstance( processInstance.getId() );

    assertEquals(number, ((InternalProcessRuntime) ((InternalWorkingMemory) session2).getProcessRuntime()).getTimerManager().getTimers().size());

    session2.halt();
    // Do something with myList

    // Do something with processInstance

}

 file name 104.java

 duplicated lines 8
{
    Message message;
    KnowledgeBase kbase;
    try {
        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();
        KnowledgeRuntimeLogger logger = KnowledgeRuntimeLoggerFactory.newFileLogger(ksession, string);
        ksession.insert(message);
        ksession.fireAllRules();
        logger.close();
    } catch (Throwable t) {
        // Do something
    }
}

 file name 130.java

 duplicated lines 4
{
    Environment env;
    String ruleString;
    List<?> list;
    KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();
    kbuilder.add( ResourceFactory.newByteArrayResource( ruleString.getBytes() ),
    ResourceType.DRL );
    KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();

    if ( kbuilder.hasErrors() ) {
        fail( kbuilder.getErrors().toString() );
    }

    kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );

    StatefulKnowledgeSession ksession = JPAKnowledgeService.newStatefulKnowledgeSession( kbase, null, env );
    ksession.setGlobal( string,
    list );

    ksession.insert( number );
    ksession.insert( number );
    ksession.insert( number );

    ksession.fireAllRules();
}

 file name 142.java

 duplicated lines 8
{
    Driver driverFemale;
    Policy policy;
    StatefulSession session;
    Driver driverMale;
    session.insert(policy);

    session.insert(driverMale);
    session.fireAllRules();

    session.insert(policy);

    session.insert(driverFemale);
    session.fireAllRules();
}

 file name 161.java

 duplicated lines 8
{

    Map<String, Object> params;
    Person adultEval;
    StatefulKnowledgeSession ksession;
    ksession.insert(adultEval);

    WorkflowProcessInstance processInstance = (WorkflowProcessInstance) ksession.startProcess(string, params);
    ksession.insert(processInstance);
    ksession.fireAllRules();

    assertProcessInstanceCompleted(processInstance.getId(), ksession);
    assertNodeTriggered(processInstance.getId(), string);
    ksession.dispose();
}

 file name 163.java

 duplicated lines 4
{
    AUSLOANAPPLICATIONType application;
    Package pkg;
    RuleBase ruleBase = RuleBaseFactory.newRuleBase();
    ruleBase.addPackage( pkg );

    StatelessSession session = ruleBase.newStatelessSession();
    session.addEventListener( new DebugAgendaEventListener() );

    StatelessSessionResult results = session.executeWithResults( new Object[] { application }  );

    AUSLOANAPPLICATIONType returnedApplication = ( AUSLOANAPPLICATIONType ) results.iterateObjects().next();
    // Do something with returnedApplication
}

 file name 169.java

 duplicated lines 4
{
    final List<String> list;
    RuleBase ruleBase;
    final PackageBuilder builder = new PackageBuilder();
    builder.addPackageFromDrl( new InputStreamReader( getClass().getResourceAsStream( string ) ) );
    builder.addRuleFlow( new InputStreamReader( getClass().getResourceAsStream( string ) ) );
    final Package pkg = builder.getPackage();

    ruleBase.addPackage( pkg );
    final WorkingMemory workingMemory = ruleBase.newStatefulSession();
    workingMemory.setGlobal( string,
    list );

    workingMemory.fireAllRules();
    final ProcessInstance processInstance = workingMemory.startProcess( string );
    assertEquals( ProcessInstance.STATE_ACTIVE,
    processInstance.getState() );
    workingMemory.fireAllRules();
    assertEquals( ProcessInstance.STATE_COMPLETED,
    processInstance.getState() );

}

 file name 173.java

 duplicated lines 4
{
    boolean buildStats;
    AgendaEventListener listener;
    String fileName;
    WorkingMemory workingMemory;
    PackageBuilder builder = new PackageBuilder();
    builder.addPackageFromDrl( new InputStreamReader( DroolsManners.class.getResourceAsStream( fileName ) ) );
    Package pkg = builder.getPackage();

    RuleBase ruleBase = RuleBaseFactory.newRuleBase();
    ruleBase.addPackage( pkg );
    workingMemory = ruleBase.newWorkingMemory();


    if( buildStats ) {
        workingMemory.addEventListener( listener );
    }
}

 file name 185.java

 duplicated lines 4
{
    StatefulKnowledgeSession session;
    List objects;
    Map<String, Object> globals;
    if (session != null) {
        try {
            for (Map.Entry<String, Object> e : globals.entrySet()) {
                session.setGlobal(e.getKey(), e.getValue());
            }
            for (Object o : objects) {
                synchronized (session) {
                    session.insert(o);
                }
                session.fireAllRules();
            }
            return session.getObjects();
        } finally {
            session.dispose();
        }
    }
}

 file name 186.java

 duplicated lines 4
{
    Reader source;
    PackageBuilder builder = new PackageBuilder();
    builder.addRuleFlow(source);
    Package pkg = builder.getPackage();
    RuleBase ruleBase = RuleBaseFactory.newRuleBase();
    ruleBase.addPackage( pkg );
    StatefulSession session = ruleBase.newStatefulSession();
    ProcessInstance processInstance = session.startProcess(string);
    assertEquals(ProcessInstance.STATE_ACTIVE, processInstance.getState());

    processInstance = session.getProcessInstance(processInstance.getId());
    processInstance.signalEvent(string, string);
    assertEquals(ProcessInstance.STATE_COMPLETED, processInstance.getState());
}

 file name 192.java

 duplicated lines 4
{

    Order internationalUSPSOrderRejected;
    List<Order> rejectedNational;
    Order internationalExpressOrder;
    Order nationalStandardOrder;
    List<Order> priorityCustomer;
    List<Order> rejectedInternational;
    Order internationalUSPSOrderAccepted;
    StatefulKnowledgeSession ksession;
    Order nationalExpressOrder;
    ksession.setGlobal(string, rejectedNational);
    ksession.setGlobal(string, rejectedInternational);
    ksession.setGlobal(string, priorityCustomer);

    ksession.insert(internationalExpressOrder);
    ksession.insert(internationalUSPSOrderRejected);
    ksession.insert(internationalUSPSOrderAccepted);
    ksession.insert(nationalStandardOrder);
    ksession.insert(nationalExpressOrder);
    ksession.fireAllRules();
}

 file name 193.java

 duplicated lines 24
{
    Reader source;
    List<String> list;
    PackageBuilder builder = new PackageBuilder();
    builder.addRuleFlow(source);
    Package pkg = builder.getPackage();
    for (DroolsError error: builder.getErrors().getErrors()) {
        // Do something
    }
    RuleBase ruleBase = RuleBaseFactory.newRuleBase();
    ruleBase.addPackage( pkg );
    WorkingMemory workingMemory = ruleBase.newStatefulSession();
    workingMemory.setGlobal(string, list);
    ProcessInstance processInstance = ( ProcessInstance )
    workingMemory.startProcess(string);
    // Do something with processInstance
}

 file name 201.java

 duplicated lines 6
{
    TestWorkItemHandler handler;
    Map<String, Object> variables;
    String process;
    final PackageBuilder builder = new PackageBuilder();
    builder.addProcessFromXml( new StringReader( process ));
    final Package pkg = builder.getPackage();

    final RuleBase ruleBase = RuleBaseFactory.newRuleBase();
    ruleBase.addPackage(pkg);

    StatefulSession session = ruleBase.newStatefulSession();
    session.getWorkItemManager().registerWorkItemHandler(string, handler);
    session.startProcess(string, variables);

    assertEquals(number, session.getProcessInstances().size());
    assertEquals(number, session.getProcessInstances().size());
    VariableScopeInstance variableScopeInstance = (VariableScopeInstance)
    (( ProcessInstance )session.getProcessInstances().iterator().next()).getContextInstance(VariableScope.VARIABLE_SCOPE);
    session.getWorkItemManager().completeWorkItem(handler.getWorkItem().getId(), null);

    assertEquals(number, session.getProcessInstances().size());
    // Do something with variableScopeInstance

}

 file name 209.java

 duplicated lines 4
{
    Map<String, Object> params;
    Reader source;
    PackageBuilder builder = new PackageBuilder();
    builder.addRuleFlow(source);
    builder.addRuleFlow(source);
    Package pkg = builder.getPackage();
    RuleBase ruleBase = RuleBaseFactory.newRuleBase();
    ruleBase.addPackage( pkg );
    WorkingMemory workingMemory = ruleBase.newStatefulSession();
    ProcessInstance processInstance = ( ProcessInstance )
    workingMemory.startProcess(string, params);
    assertEquals(number, workingMemory.getProcessInstances().size());
    assertEquals(number, workingMemory.getProcessInstances().size());
    // Do something with processInstance

}

 file name 212.java

 duplicated lines 6
{
    Reader source;
    final StatefulSession session2;
    List<Message> myList;
    PackageBuilder builder = new PackageBuilder();
    builder.addRuleFlow(source);
    if (!builder.getErrors().isEmpty()) {
        for (DroolsError error: builder.getErrors().getErrors()) {
            // Do something
        }
    }

    Package pkg = builder.getPackage();
    RuleBase ruleBase = RuleBaseFactory.newRuleBase();
    ruleBase.addPackage( pkg );
    final StatefulSession session = ruleBase.newStatefulSession();
    session.setGlobal(string, myList);

    ProcessInstance processInstance = ( ProcessInstance )
                                      session.startProcess(string);
    assertEquals(number, ((InternalProcessRuntime) ((InternalWorkingMemory) session).getProcessRuntime()).getTimerManager().getTimers().size());
    session.halt();

    myList = (List<Message>) session2.getGlobal( string );
    processInstance = ( ProcessInstance ) session2.getProcessInstance( processInstance.getId() );

    assertEquals(number, ((InternalProcessRuntime) ((InternalWorkingMemory) session2).getProcessRuntime()).getTimerManager().getTimers().size());

    session2.halt();
    // Do something with myList

    // Do something with processInstance

}

 file name 213.java

 duplicated lines 8
{
    final StatefulKnowledgeSession ksession;
    SessionPseudoClock clock;
    MeetingStartEvent meetingEvent;
    IncomingCallEvent callEvent;
    WorkingMemoryEntryPoint meetingsEP = ksession.getWorkingMemoryEntryPoint(string);
    WorkingMemoryEntryPoint incomingCallsEP = ksession.getWorkingMemoryEntryPoint(string);

    meetingsEP.insert(meetingEvent);

    clock.advanceTime(number, TimeUnit.MINUTES);
    incomingCallsEP.insert(callEvent);
    ksession.fireAllRules();

    incomingCallsEP.insert(callEvent);

    clock.advanceTime(number, TimeUnit.MINUTES);

    ksession.fireAllRules();

    ksession.dispose();
}

 file name 236.java

 duplicated lines 8
{
    Person jack;
    Reader source;
    List<Message> myList;
    PackageBuilder builder = new PackageBuilder();
    builder.addRuleFlow(source);
    if (!builder.getErrors().isEmpty()) {
        for (DroolsError error: builder.getErrors().getErrors()) {
            // Do something
        }
    }

    Package pkg = builder.getPackage();
    RuleBase ruleBase = RuleBaseFactory.newRuleBase();
    ruleBase.addPackage( pkg );
    StatefulSession session = ruleBase.newStatefulSession();
    session.setGlobal(string, myList);

    session.insert(jack);
    session.fireAllRules();
}

 file name 246.java

 duplicated lines 8
{
    Reader source;
    List<String> list;
    TestWorkItemHandler testHandler;
    WorkItem workItem;
    PackageBuilder builder = new PackageBuilder();
    builder.addRuleFlow(source);
    Package pkg = builder.getPackage();
    for (DroolsError error: builder.getErrors().getErrors()) {
        // Do something
    }
    RuleBase ruleBase = RuleBaseFactory.newRuleBase();
    ruleBase.addPackage( pkg );
    WorkingMemory workingMemory = ruleBase.newStatefulSession();
    workingMemory.setGlobal(string, list);
    workingMemory.getWorkItemManager().registerWorkItemHandler(string, testHandler);
    ProcessInstance processInstance = ( ProcessInstance )
    workingMemory.startProcess(string);
    workingMemory.getWorkItemManager().completeWorkItem(workItem.getId(), null);
    // Do something with processInstance
}

 file name 250.java

 duplicated lines 6
{
    Policy policy;
    StatefulSession session;
    Driver driverMale;
    session.insert(policy);

    session.insert(driverMale);
    session.fireAllRules();
}

 file name 26.java

 duplicated lines 4
{
    BusinessEntity businessEntity;
    BusinessEntity sessionInteractionKey;
    WorkItem wi;
    long workItemId = wi.getId();
    long processInstanceId = wi.getProcessInstanceId();
    StatefulKnowledgeSession ksession = JPAKnowledgeService.loadStatefulKnowledgeSession(sessionInteractionKey.getSessionId(), kbases.get(string), null, env);
    ksession.insert(businessEntity);
    ksession.fireAllRules();
    // Do something with workItemId

    // Do something with processInstanceId
}

 file name 302.java

 duplicated lines 4
{
    StatefulKnowledgeSession ksession;
    Person person;
    ksession.insert(person);
    ksession.fireAllRules();
    ksession.insert(person);
    ksession.fireAllRules();
}

 file name 34.java

 duplicated lines 6
{
    RemoteServiceEvent event;
    WorkingMemoryEntryPoint provisionEventsStream;
    StatefulKnowledgeSession session;
    provisionEventsStream.insert(event);
    session.fireAllRules();
}

 file name 47.java

 duplicated lines 4
{

    Policy policy;
    StatefulSession session;
    Driver driver;
    DriverAdditionalInfo driverAdditional;
    session.insert( policy );
    session.insert( driver );
    session.insert( driverAdditional );

    session.fireAllRules();
}

 file name 49.java

 duplicated lines 8
{
    List<Bill> bills;
    StatefulKnowledgeSession ksession;
    List<String> errors;
    ksession.setGlobal(string, errors);

    for (Bill bill : bills) {
        ksession.insert(bill);
        for (Procedure procedure : bill.getProcedures()) {
            ksession.insert(procedure);
        }
    }
    ksession.fireAllRules();

    ksession.dispose();
}

 file name 53.java

 duplicated lines 4
{

    StatefulKnowledgeSession ksession;
    Playlist playlist;
    ksession.insert(playlist);
    ksession.fireAllRules();

    ksession.insert(createPlaylistWithOneSong());
    ksession.fireAllRules();
    ksession.dispose();
}

 file name 57.java

 duplicated lines 4
{
    Iterator<Object> it_obj;
    Object obj;
    final Reader source;
    boolean load_to_drools;
    final PackageBuilder builder = new PackageBuilder();

    builder.addPackageFromDrl(source);

    if (builder.hasErrors()) {
        System.out.println(builder.getErrors().toString());
    }
    final Package pkg = builder.getPackage();

    final RuleBase ruleBase = RuleBaseFactory.newRuleBase();
    ruleBase.addPackage(pkg);

    if (load_to_drools) {
        final StatefulSession session = ruleBase.newStatefulSession();
        session.addEventListener(new DebugAgendaEventListener());
        session.addEventListener(new DebugWorkingMemoryEventListener());
        final WorkingMemoryFileLogger logger = new WorkingMemoryFileLogger(
            session);
        logger.setFileName(string);
        while (it_obj.hasNext()) {
            try {
                session.insert(obj);
            } catch (Exception e) {
                // Do something
            }
        }
        session.fireAllRules();
        logger.writeToDisk();
        session.dispose();
    }

}

 file name 78.java

 duplicated lines 4
{
    Map<String, Object> params;
    Reader source;
    List<Long> list;
    PackageBuilder builder = new PackageBuilder();
    builder.addRuleFlow(source);
    Package pkg = builder.getPackage();
    RuleBase ruleBase = RuleBaseFactory.newRuleBase();
    ruleBase.addPackage( pkg );
    WorkingMemory workingMemory = ruleBase.newStatefulSession();
    workingMemory.setGlobal(string, list);

    ProcessInstance processInstance = ( ProcessInstance )
    workingMemory.startProcess(string, params);

    assertEquals(ProcessInstance.STATE_COMPLETED, processInstance.getState());
}

 file name 81.java

 duplicated lines 6
{
    TimerExpired expiration;
    WorkingMemory m_workingMemory;
    m_workingMemory.insert(expiration);
    m_workingMemory.fireAllRules();
}

 file name 94.java

 duplicated lines 4

 total time 46