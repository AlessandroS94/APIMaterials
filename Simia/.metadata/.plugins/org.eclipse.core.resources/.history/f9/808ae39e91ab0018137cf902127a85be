import java.io.IOException; 
import java.util.Iterator; 
import java.util.Map.Entry; 
 
import javax.jcr.GuestCredentials; 
import javax.jcr.NoSuchWorkspaceException; 
import javax.security.auth.login.LoginException; 
import javax.servlet.ServletException; 
import javax.servlet.http.HttpServlet; 
import javax.servlet.http.HttpServletRequest; 
import javax.servlet.http.HttpServletResponse; 
 
import com.fasterxml.jackson.core.JsonFactory; 
import com.fasterxml.jackson.databind.JsonNode; 
import com.fasterxml.jackson.databind.ObjectMapper; 
import com.fasterxml.jackson.dataformat.smile.SmileFactory; 
import org.apache.jackrabbit.oak.api.CommitFailedException; 
import org.apache.jackrabbit.oak.api.ContentRepository; 
import org.apache.jackrabbit.oak.api.ContentSession; 
import org.apache.jackrabbit.oak.api.Root; 
import org.apache.jackrabbit.oak.api.Tree; 
import org.apache.tika.mime.MediaType; 
 
public class OakServlet extends HttpServlet { 
 
    private static final MediaType JSON = 
            MediaType.parse("application/json"); 
 
    private static final MediaType SMILE = 
            MediaType.parse("application/x-jackson-smile"); 
 
    private static final Representation[] REPRESENTATIONS = { 
        new JsonRepresentation(JSON, new JsonFactory()), 
        new JsonRepresentation(SMILE, new SmileFactory()), 
        new PostRepresentation(), 
        new TextRepresentation() }; 
 
    private final ContentRepository repository; 
 
    public OakServlet(ContentRepository repository) { 
        this.repository = repository; 
    } 
 
    @Override 
    protected void service( 
            HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException { 
        try { 
            ContentSession session = repository.login(new GuestCredentials(), null); 
            try { 
                Root root = session.getLatestRoot(); 
                Tree tree = root.getTree(request.getPathInfo()); 
                request.setAttribute("root", root); 
                request.setAttribute("tree", tree); 
                super.service(request, response); 
            } finally { 
                session.close(); 
            } 
        } catch (NoSuchWorkspaceException e) { 
            response.sendError(HttpServletResponse.SC_NOT_FOUND); 
        } catch (LoginException e) { 
            throw new ServletException(e); 
        } 
    } 
 
    @Override 
    protected void doGet( 
            HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException { 
        AcceptHeader accept = new AcceptHeader(request.getHeader("Accept")); 
        Representation representation = accept.resolve(REPRESENTATIONS); 
 
        Tree tree = (Tree) request.getAttribute("tree"); 
        representation.render(tree, response); 
    } 
 
    @Override 
    protected void doPost( 
            HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException { 
